package cn.ning.pattern.creational.factory.simplefactory;

/*
 * 简单工厂模式。
 *     |--- Factory : 工厂角色 1
 *     |        工厂角色负责实现创建所有实例的内部逻辑。
 *     |
 *     |--- Product ： 抽象产品角色 1
 *     |        抽象产品角色是所有被创建对象的父类，负责描述所有实例之间共有的公共接口。
 *     |
 *     |--- ConcreteProduct : 具体产品角色 1+
 *     |        具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。
 *
 * 定义：
 *     定义一个工厂类，根据传入的参数不同返回不同的实例，被创建的实例具有共同的父类或接口。
 *
 * 适用场景：
 *     1. 工厂类需要创建的对象(具体产品)较少；
 *     2. 客户端不关心对象的创建过程。
 *
 * 优点：
 *     1. 将创建实例的工作与使用实例的工作分开，使用者不必关心对象是如何创建的，实现了解耦；
 *     2. 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。
 * 缺点：
 *     1. 由于工厂类集中了所有产品的创建逻辑，一旦不能正常工作，整个系统都要受到影响；
 *     2. 系统扩展困难，一旦添加新产品，就不得不修改工厂逻辑，违背了“开放-关闭”原则。在产品种类较多时，可能会造成工厂逻
 *        辑过于复杂，不利于系统的维护。
 *     3. 简单工厂模式由于使用了静态工厂方法，静态方法不能被重写(即不能实现多态)，造成工厂角色无法形成基于继承的等级结
 *        构。
 *
 */
public class Demo {
    public static void main(String[] args) {
        Car car = CarFactory.createCar("audi");
        car.run();
        car = CarFactory.createCar("honda");
        car.run();
        car = CarFactory.createCar("bmw");
        car.run();
    }
}
