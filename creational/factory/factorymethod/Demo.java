package cn.ning.pattern.creational.factory.factorymethod;

/*
 * 工厂方法模式。
 *     |--- Product : 抽象产品 1
 *     |--- ConcreteProduct ： 具体产品 1+
 *     |--- Factory ： 抽象工厂 1
 *     |--- ConcreteFactory ： 具体工厂 1+
 *
 * 定义：
 *     工厂方法模式，又称工厂模式、多态工厂模式和虚拟构造器模式，通过定义工厂父类(工厂抽象类)负责创建对象的公共接口，
 *     而子类负责生成具体的对象。
 *
 * 适用场景：
 *     1. 一个类不知道它你所需对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，
 *        具体的产品对象则由具体工厂类创建；客户端需要知道创建具体产品的工厂类；
 *     2. 一个类通过其子类来指定创建哪个对象；
 *     3. 将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时，可以无须关心是哪一个工厂子类创建产品子类，
 *        需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。
 *
 * 优点：
 *     除了具有简单工厂模式的优点外，还有，在系统中加入新产品时，无须修改抽象工厂和抽象产品类，无须修改客户端，
 *     也无需修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了，使得系统的扩展性更好了，
 *     符合“开闭原则”。
 * 缺点：
 *     1. 在添加新产品时，系统中的类的个数将成对增加，在一定程度上增加了系统的复杂性。
 *     2. 由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，
 *        且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。
 *
 */
public class Demo {
    public static void main(String[] args) {
        Car car = new AudiFactory().createCar();
        car.run();
        car = new BmwFactory().createCar();
        car.run();
        car = new HondaFactory().createCar();
        car.run();
    }
}
